%
function [root,info] = modifiedbrent3035385926(f,Int,params)

flag=0;mflag=0;s=0;niter=0;

% Preparation
a=Int.a;
fa=f(Int.a);
b=Int.b;
fb=f(Int.b);

if (sign(fa)*sign(fb)>0)
    error ("not a valid initial bracketing");
end

x1=a;f1=fa;
x2=b;f2=fb;
x3 =x1;f3=f1;

last_interval=b-a;
mini=f3;
condi=0;func_call=2;

% main loop
for i=1:params.maxit

    if abs(f3)<params.func_tol
        break;
    end
    
    if abs(b-a)<params.root_tol
        break;
    end
    
    if (mflag~=0) && (abs(f3)>0.5*abs(mini))
        %if abs(fs)is not at least a factor of two smaller 
        %than the previous best point: bisection
        condi=1;
    end
    
    if (mflag>=5)&&(abs(b-a)>0.5*last_interval)||(condi==1)
        %If five successive interpolation steps fail to reduce the size of 
        %the original interval or the last interval generated by a bisection 
        %step by a factor of two.
        %a bisection sep is performed
        s=(a+b)/2;
        last_interval=(a-b)/2;
        mflag=0;
        condi=0; 
    else
        if (length(unique([f1,f2,f3]))==3) %IQI
              q1=f2*f3*x1/((f1-f2)*(f1-f3));
              q2=f1*f3*x2/((f2-f1)*(f2-f3));
              q3=f1*f2*x3/((f3-f1)*(f3-f2));
              s=q1+q2+q3;
        else %secant
              s=x2-f2*(x2-x1)/(f2-f1);
        end
        mflag = mflag + 1;
    end
    
    
    fs=f(s); 
    func_call=func_call+1;
        
    
    % set the new |min(f(x))|
    if (abs(fs)<mini)  
       mini=abs(fs);
    end   

    if s<x3
        x2=x3;f2=f3;
    else
        x1=x3;f1=f3;
    end
    x3=s;
    f3=fs;
    
    %change the lenght of the interval [a,b]
    if f1*f3<0
        b=x3;
    else
        a=x3;
    end
    
    niter=niter+1;
    
end % end of main loop
root=x3;
info.func_call=func_call;
info.flag=flag;
info.niter=niter;

end